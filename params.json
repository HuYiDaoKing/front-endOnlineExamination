{"name":"2015阿里巴巴前端实习生在线笔试题","tagline":"JavaScript Alibaba Web前端","body":"# 2015阿里巴巴前端实习生在线笔试题\r\n\r\n前几天参加了2015阿里巴巴前端实习生在线笔试，发现题目真的挺难的，后来再重新回想的时候，除了本来就不会做的，还发现自己做错了几道题，现在整理一下那些笔试题，这里的笔试题部分是自己的，也有部分是工作室其他小伙伴们提供的。感谢楷豪师兄和闻东师兄的相关指导，感谢工作室其他小伙伴们提供的题目和答案。下面选择题给出的一些解析和答案都是自己上网查过相关资料然后根据自己的理解给出的，不保证全部正确哈，仅作参考作用。\r\n\r\n------\r\n## 一、（单项选择）对于下列程序运行结果，符合预期的是\r\n```JavaScript\r\nfunction f1() {\r\n\r\n    console.time('time span');\r\n    \r\n}\r\nfunction f2() {\r\n\r\n    console.timeEnd('time span');\r\n    \r\n}\r\n\r\nsetTimeout(f1, 100);\r\n\r\nsetTimeout(f2, 200);\r\n\r\nfunction waitForMs(n) {\r\n\r\n    var now = Date.now();\r\n    \r\n    while (Date.now() - now < n) {}\r\n    \r\n}\r\n\r\nwaitForMs(500);\r\n```\r\n>* A、time apan:700.077ms\r\n>* B、time apan:0.066ms\r\n>* C、time apan:500.077ms\r\n>* D、time apan:100.077ms\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n`console.time()`语句和`console.timeEnd()`语句是用来对程序的执行进行计时的。因为`f1`和`f2`被都`setTimeout()`事先设置的定时器装到一个事件队列里面。本来`f1`应该在100ms后就要执行了，但是因为`waitForMs()`占用了线程，而执行`JavaScript`是单线程的，所以就没办法在100ms后执行那个`f1`，所以需要等500ms等`waitForMs()`执行完，然后再执行`f1`和`f2`，这时候`f1`和`f2`就几乎同时执行了。所以应该选时间最短的一项，所以答案应该选`B` **（楷豪师兄提供的解答）**\r\n\r\n------\r\n\r\n##二、（单项选择）请选择结果为真的表达式\r\n>* A、null instanceof Object\r\n>* B、null == undefined\r\n>* C、NaN == NaN\r\n>* D、false == undefined\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n**A、**未定义的值和定义未赋值的为undefined，null是一种特殊的object，所以`typeof null` 返回的应该是`object`，但是为什么`null instanceof Object`返回的是`false`呢？原因就是`null`是个特殊的`Object`类型的值 ，表示空引用的意思 。`instanceof` 表示某个变量是否是某个对象的实例 ,所以为`false` 。\r\n\r\n**B、**`undefined == null`是正确的，尽管如此，和其他相似之处，但`null`和`undefined`并不是等价的。每个作为其独特的类型的唯一成员,`undefined`是`Undefined`类型和`null`是`Null`类型。所以`undefined === null`是不正确的，因为他们虽然值相等，但是类型不相等。区分这两个值，可以认为`undefined`代表一个意想不到的没有值而`null`作为预期没有值的代表。\r\n\r\n**（null:）**是一个对象，但是为空。因为是对象，所以`typeof null`返回`object` 。`null`是`JavaScript`保留关键字。 \r\n`null`参与数值运算时其值会自动转换为`0`，因此，下列表达式计算后会得到正确的数值： \r\n表达式：`123 + null` 结果值：`123` \r\n表达式：`123 * null` 结果值：`0`\r\n\r\n**（undefined：）**是全局对象`（window）`的一个特殊属性，其值是未定义的。但`typeof undefined`返回`undefined`。\r\n\r\n**C、**`NaN`是一个值类型,同是也是一个数值.意思是`Not A\r\nNumber`,这个都知道是什么意思.值比较特殊,特殊在于`NaN`是一个数字,是一个与任何数值都不相等的数字。所以`NaN == NaN`返回`false`。\r\n\r\n**D、**`undefined`被转换为布尔值为`false`，`Boolean(undefined)`返回的是`false`，但是`undefined`不等于`false`。所以`false == undefined`返回`false`。\r\n\r\n所以最终答案应该为`B`。\r\n\r\n------\r\n\r\n##三、（单项选择）下面程序的执行结果是\r\n```JavaScript\r\nvar name = 'World!';\r\n(function () {\r\n  if (typeof name === 'undefined') {\r\n    var name = 'Jack';\r\n    console.log('Goodbye ' + name);\r\n  } else {\r\n    console.log('Hello ' + name);\r\n  }\r\n})();\r\n\r\n```\r\n>* A、Goodbye Jack\t\r\n>* B、Hello Jack\r\n>* C、Hello undefined\r\n>* D、Hello World\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n因为`JavaScript`中的变量的查找是就近原则去寻找`var`定义的变量，当就近没有找到的话就会找外层。题目中因为`if`判段语句`(typeof name === 'undefined')`就近定义的`name`就在其执行完的下一行，所以`name`就被预解析了，实际上可以理解成在`if`判段语句`(typeof name === 'undefined')`上面`var name`这样定义了`name`，但是尚未被赋值。而在它执行完后面再去为`name`赋值`name = 'Jack';`，所以`name`的值是`undefined`。所以`typeof name === 'undefined'`成立，所以判断语句会走`if`成立部分。\r\n\r\n所以最终答案应该为`A`。\r\n\r\n------\r\n\r\n##四、（不定项选择）以下关于DOM事件流的表述哪些是正确的\r\n>* A、事件流包括两个阶段：事件捕获阶段、事件冒泡阶段\r\n>* B、IE跟标准浏览器对于DOM事件流实现不一样\r\n>* C、假设parentEle是childEle的父节点，绑定事件：parentEle.addEventListener(\"click\", fn1, false)和childEle.addEventListener(\"click\", fn2,false),当点击childEle的时候fn1将先于fn2触发\r\n>* D、addEventListener第三个参数true代表支持捕获，false代表不支持捕获\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n在`W3C`事件模型中，任何事件会首先被捕获直至到达目标元素然后再冒泡回去。事件流包括`3`个阶段：`事件捕获阶段`、`处于目标阶段`和`事件冒泡阶段`。所以`A`选项是`错`的。Web开发者可以选择将事件处理程序注册在捕获或者冒泡阶段。这可以通过`addEventListener()`方法来实现。如果该方法传入的最后一个参数值为`true`，表示事件处理程序被注册在捕获阶段，如果为`false`表示件处理程序被注册在冒泡阶段。所以`D`选项也是`错`的。\r\n\r\n假设有如下程序(`childEle`是`parentEle`的子元素)：\r\n\r\n1.`parentEle.addEventListener(\"click\", parentDoSomething, true);`\r\n\r\n2.`childEle.addEventListener(\"click\", childEleDoSomething, false);`\r\n\r\n如果用户点击子元素`childEle`会发生如下事情：\r\n\r\n>a、点击事件开始于`捕获阶段`。它会先查询是否有`childEle`的任何祖先元素在`捕获阶段`绑定了`onclick`事件。\r\n\r\n>b、它发现祖先元素1在捕获阶段绑定了`onclick`事件，于是`parentEle.parentDoSomething()`首先被执行。\r\n\r\n>c、事件一直查询到目标元素`childEle`都没有再发现别的在`捕获阶段`绑定的`onclick`事件，事件转到它的`冒泡阶段`并执行`childEleDoSomething()`(注册在`childEle`上的在`冒泡阶段`执行的事件处理程序)。\r\n\r\n>d、事件再次向上查询并检查是否有任何祖先元素在`冒泡阶段`绑定了`onclick`事件，并没有查询到，所以什么都没有发生。\r\n\r\n\r\n再看相反的例子：\r\n\r\n1.`parentEle.addEventListener(\"click\", parentDoSomething, false);`\r\n\r\n2.`childEle.addEventListener(\"click\", childEleDoSomething, false);`\r\n\r\n现在如果用户点击`childEle`，下面的事情会按顺序发生：\r\n\r\n>a、点击事件发生于`捕获阶段`。事件查询`childEle`是否有任何祖先元素在`捕获阶段`绑定了`onclick`事件并且没有查找到这样的元素。\r\n\r\n>b、事件查询到目标元素`childEle`自己。事件转为`冒泡阶段`并执行`childEleDoSomething()`。\r\n\r\n>c、事件再次向上查询并检查目标元素是否有任何祖先元素在`冒泡阶段`绑定了`onclick`事件。\r\n\r\n>d、它找到了满足条件的`parentEle`，然后执行`parentDoSomething()`。所以选项`C`是`错`的，应该是`fn2`先触发。\r\n\r\n\r\n因为`IE`没有提供对`事件捕获阶段`的支持，所以`IE`跟`标准浏览器`对于`DOM事件流`实现不一样。\r\n所以最终答案应该为`B`。\r\n\r\n------\r\n\r\n##五、（不定项选择）通过下面的哪些方法可以获取页面的html元素\r\n>* A、document.getElementById\t\r\n>* B、document.getElementsByClassName\r\n>* C、document.querySelector\r\n>* D、document.querySelectorAll\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n**A、**页面的`html元`素可以通过`id`获取，具有唯一性，如：`var divObjId = document.getElementsById(\"test\");`。所以`A`是正确的。\r\n\r\n**B、**页面的`html`元素可以通过`class`获取，会选择页面上所有`class`名为`test`的DOM标签，如：`var divObjClass = document.getElementsByClassName(\"test\");`。所以`B`是正确的。\r\n\r\n**C、D 、**`document.querySelector`只返回匹配的第一个元素，如果没有匹配项，返回`null`。`document.querySelectorAll`返回匹配的元素集合，如果没有匹配项，返回空的`nodelist`(节点数组)。这两个方法都可以接受三种类型的参数：`id(#)`，`class(.)`，`标签`，很像`jquery`的选择器。如：\r\n\r\n```JavaScript\r\nvar obj = document.querySelector(\"#id\");\r\nvar obj = document.querySelector(\".classname\");\r\nvar obj = document.querySelector(\"div\");\r\nvar el = document.body.querySelector(\"style[type='text/css'], style:not([type])\");\r\nvar elements = document.querySelectorAll(\"#score>tbody>tr>td:nth-of-type(2)\");\r\nvar elements = document.querySelectorAll(\"#id1, #id2, .class1, class2, div a, #list li img\");\r\n\r\n```\r\n所以`C`和`D`都是正确的。\r\n\r\n所以最终的答案是`A,B,C,D`。\r\n\r\n------\r\n\r\n##六、（不定项选择）下面选项中，对javascript事件的描述不正确的是\r\n>* A、IE使用attachEvent/detachEvent方法来添加和删除事件监听器；w3c使用addEventListener/removeEventListener方法\r\n>* B、IE是将event对象作为参数传递给监听器,w3c事件监听器内使用的是一个全局的Event对象\r\n>* C、IE提供了对事件捕获阶段的支持\r\n>* D、要停止事件的传递，IE的做法是设置event对象的cancelBubble为true，而w3c的做法是设置执行stopPropagation方法\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n**A、**`IE`使用`attachEvent/detachEvent`方法来添加和删除事件监听器；`w3c`使用`addEventListener/removeEventListener`方法。这是正确的。\r\n\r\n**B、**`IE`事件监听器内使用的是一个全局的`Event`对象，而`w3c`是将`event`对象作为参数传递给监听器。所以`B`是错误的。\r\n\r\n**C、**`IE`没有提供对事件捕获阶段的支持。所以`C`也是错误的。\r\n\r\n**D、**要想阻止冒泡，在`Microsoft`模型中，需要将事件的`cancelBubble`属性设置为`true`。在`W3C`模型中，需要调用事件的`stopPropagation()`方法。\r\n\r\n这两种方法阻止了事件的所有冒泡。如果想解决浏览器兼容问题，可以像下面这样写：\r\n\r\n```JavaScript\r\nfunction doSomething(e){\r\n\r\n    e = window.event || e;\r\n    \r\n    e.cancelBubble = true;\r\n    \r\n    if(e.stopPropagation){\r\n    \r\n        e.stopPropagation();\r\n        \r\n    }\r\n    \r\n}\r\n```\r\n\r\n在不支持`cancelBubble`属性的浏览器中设置它的值并不会报错。浏览器会忽略它并创建这个属性。当然，它并不能真正地阻止冒泡，但是给它分配值的操作本身是安全的。\r\n所以最终的答案是`B,C`。\r\n\r\n------\r\n\r\n##七、（单项选择）\r\n```JavaScript\r\nvar array1 = [1,2];\r\n\r\nvar array2 = array1;\r\n\r\narray1[0] = array2[1];\r\n\r\narray2.push(3);\r\n\r\nconsole.log(array1);\r\n\r\nconsole.log(array2);\r\n```\r\n执行上面的代码`array1`和`array2`的值分别是什么？\r\n>* A、Array1的值为[2,2];Array2的值为[1,2,3]\r\n>* B、Array1的值为[2,2,3];Array2的值为[1,2,3]\r\n>* C、Array1的值为[2,2,3];Array2的值为[2,2,3]\r\n>* D、Array1的值为[1,2,3];Array2的值为[1,2,3]\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n数组对象是引用的关系，`array2`改变，`array1`也会改变。`array1`改变，`array2`也会改变。\r\n所以最终的答案是`C`。\r\n\r\n------\r\n\r\n##八、（不定项选择）有如下代码\r\n```JavaScript\r\nfunction Test(name,age){\r\n\tthis.name = name;\r\nthis.age = age;\r\n};\r\nTest.prototype = {\r\n\tname:'aliyun',\r\n\thasOwnproperty:function(){\r\n\treturn false;\r\n}\r\n};\r\nvar instance = new Test('alibaba',102);\r\n```\r\n以下关于原型链的说法正确的是：\r\n>* A、JavaScript对象有两种不同的属性，一种是对象自身的属性，另一种是继承于原型链上的属性\r\n>* B、instance.name == 'aliyun'为true\r\n>* C、instance.hasOwnproperty('age')结果将是false\r\n>* D、所有对象都继承自Object.prototype\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n**A、**`javascript`对象有两种不同的属性来源，一个是对象自身属性，另一是继承于原型链上的属性,所以`A`是正确的。\r\n\r\n**B、**因为`instance`是`Test`对象的一个实例，如果我们在该实例中创建了`name`这个属性，这个属性的值将会屏蔽原型中的那个属性。所以`instance.name == 'aliyun'`为`false`，`instance.name`的值应为`alibaba`，所以`B`是错误的。\r\n\r\n**C、**因为`instance`是`Test`对象的一个实例，所以同样拥有`hasOwnproperty`这个方法，所以返回的结果是`false`.\r\n\r\n**D、**每个`JavaScript`对象都继承一个原型链，而所有原型都终止于`Object.prototype`。注意，这种继承是活动对象之间的继承。它不同于继承的常见概念，后者是指在声明类时类之间的发生的继承。因此，`JavaScript`继承动态性更强。它使用简单算法实现这一点，如下所示：当您尝试访问对象的属性/方法时，`JavaScript`将检查该属性/方法是否是在该对象中定义的。如果不是，则检查对象的原型。如果还不是，则检查该对象的原型的原型，如此继续，一直检查到`Object.prototype`。下图说明了此解析过程\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20150404154242137)\r\n\r\n所以`D`是正确的。\r\n\r\n所以最终的答案是`A、C、D`。\r\n\r\n------\r\n\r\n##九、实现函数range([start,]stop[,step])返回一个数组（step大于1）\r\n```JavaScript\r\n> range(1,11); => [1,2,3,4,5,6,7,8,9,10]\r\n\r\n> range(0); => []\r\n\r\n> range(10); => [0,1,2,3,4,5,6,7,8,9]\r\n\r\n> range(0,30,5); => [0,5,10,15,20,25]\r\n```\r\n<i class=\"icon-pencil\"></i> 解析：\r\n实现代码如下：\r\n```JavaScript\r\nfunction range(){\r\n\r\n    try{\r\n    \r\n        var argLength = arguments.length;\r\n\t\r\n    \tvar newArray = [];\r\n    \t\r\n    \tswitch(argLength){\r\n    \t\r\n    \t\tcase 0 : return newArray;break;\r\n    \t\t\r\n    \t\tcase 1 : {\r\n    \t\t\r\n    \t\t\tfor(var i = 0 ; i < arguments[0] ; i++){\r\n    \t\t\t\r\n    \t\t\t\tnewArray.push(i);\r\n    \t\t\t\t\r\n    \t\t\t}\r\n    \t\t\t\r\n    \t\t\treturn newArray;\r\n    \t\t\t\r\n    \t\t\tbreak;\r\n    \t\t\t\r\n    \t\t}\r\n    \t\t\r\n    \t\tcase 2 : {\r\n    \t\t\r\n    \t\t\tfor(var i = arguments[0] ; i < arguments[1] ; i++){\r\n    \t\t\t\r\n    \t\t\t\tnewArray.push(i);\r\n    \t\t\t\t\r\n    \t\t\t}\r\n    \t\t\t\r\n    \t\t\treturn newArray;\r\n    \t\t\t\r\n    \t\t\tbreak;\r\n    \t\t\t\r\n    \t\t}\r\n    \t\t\r\n    \t\tcase 3 : {\r\n    \t\t\r\n    \t\t\tfor(var i = arguments[0] ; i < arguments[1] ; i = i + arguments[2]){\r\n    \t\t\t\r\n    \t\t\t\tnewArray.push(i);\r\n    \t\t\t\t\r\n    \t\t\t}\r\n    \t\t\t\r\n    \t\t\treturn newArray;\r\n    \t\t\t\r\n    \t\t\tbreak;\r\n    \t\t\t\r\n    \t\t}\r\n    \t\t\r\n    \t\tdefault : console.log(\"error!\");break;\r\n    \t\t\r\n\t    }\r\n\t    \r\n    }catch(e){\r\n        \r\n        console.log(\"error!\");\r\n        \r\n    }\r\n\t\r\n}\r\n```\r\n------\r\n\r\n##十、背景：\r\n>1、对象A直接调用对象B的某个方法，实现交互逻辑。但是导致的问题是A和B紧密耦合，修改B可能导致A调用B的方法失效。\r\n>2、为了解决耦合导致的问题，我们可以设计成：\r\n对象A生成消息 -> 将消息通知给一个消息处理器（Observable）-> 消息处理器将消息传递给B\r\n具体的调用过程变成：\r\nA.emit(‘message’,data); B.on(‘message’,function(data){});\r\n请实现这一事件消息代理功能\r\n//请将事件消息功能补充完整\r\nfunction EventEmitter(){}\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n实现代码如下：\r\n```JavaScript\r\nfunction EventEmitter() {\r\n\r\n\tthis.eventFunctionMap = {};\r\n\t\r\n}\r\n\r\nEventEmitter.prototype.emit = function(eventName, data){\r\n\r\n\tthis.eventFunctionMap[eventName].call(this, data);\r\n\t\r\n}\r\n\r\nEventEmitter.prototype.on = function(eventName, callback) {\r\n\r\n\tthis.eventFunctionMap[eventName] = callback;\r\n\t\r\n}\r\n```\r\n------\r\n\r\n##十一、实现下图的布局\r\n```html\r\n<main>\r\n    <div>\r\n        A\r\n    </div>\r\n    <div>\r\n        B\r\n    </div>\r\n    <div>\r\n        C\r\n    </div>\r\n</main>\r\n```\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20150404154230487)\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n实现代码如下：\r\n```css\r\ndiv{\r\n\theight: 50px;\r\n\twidth: 50px;\r\n\tbackground-color: black;\r\n\tdisplay: inline-block;\r\n\tmargin-left: 10px;\r\n\tcolor: white;\r\n\tfont-size: 20px;\r\n\ttext-align: center;\r\n\tline-height: 50px;\r\n}\r\n```\r\n------\r\n\r\n##十二、有一个包含数据列表的页面，数据行数不确定。每一行数据都有一个删除按钮，单击删除按钮删除该列数据，请用JavaScript实现该功能。\r\n<i class=\"icon-pencil\"></i> 解析：\r\n实现代码如下：\r\n```html\r\n<script type=\"text/javascript\">\r\n\r\nwindow.onload = function(){\r\n\r\n\tvar oUl = document.getElementsByTagName('ul')[0];\r\n\t\r\n\toUl.onclick = function(ev){\r\n\t\r\n\t\tvar ev = ev || window.event;\r\n\t\t\r\n\t\tvar target = ev.target || ev.srcElement;\r\n\t\t\r\n\t\tif(target.tagName.toLowerCase() == 'button'){\r\n\t\t\r\n\t\t\tvar tr = target.parentNode;\r\n\t\t\t\r\n\t\t\ttr.parentNode.removeChild(tr);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n</script>\r\n<body> \r\n\t<ul>\r\n\t\t<li>一<button>删除一</button></li>\r\n\t\t<li>二<button>删除二</button></li>\r\n\t\t<li>三<button>删除三</button></li>\r\n\t\t<li>四<button>删除四</button></li>\r\n\t\t<li>五<button>删除五</button></li>\r\n\t\t<li>六<button>删除六</button></li>\r\n\t</ul>\r\n</body>\r\n```\r\n------\r\n\r\n##十三、编写CSS让一个已知宽高的DIV,在PC/手机端水平垂直居中。\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n实现代码如下：\r\n```css\r\ndiv{\r\n\twidth : 300px;\r\n\theight : 300px;\r\n\tborder : 1px solid red;\r\n\tposition : absolute;\r\n\ttop : 50%;\r\n\tleft : 50%;\r\n\tmargin-top : -150px;\r\n\tmargin-left : -150px;  \r\n}\r\n```\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20150404154352512)\r\n\r\n------\r\n\r\n##十四、使用语义化的 HTML 标签及css完成以下布局\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20150404154425147)\r\n\r\n• 容器默认宽度320px，图片100*100\r\n• hover 时容器宽度变为400px\r\n• 右侧文字宽度自适应，考虑模块化和扩展性\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n实现代码如下：\r\n```html\r\n<style type=\"text/css\">\r\ndiv{\r\n\twidth : 320px;\r\n}\r\ndiv:hover{\r\n\twidth : 400px;\r\n}\r\nimg{\r\n\tfloat : left;\r\n\twidth : 100px;\r\n\theight : 100px;\r\n}\r\nh1{\r\n\tcolor : #333;\r\n\tmargin-bottom : 8px;\r\n\tfont-size : 20px;\r\n}\r\np{\r\n\tcolor : #666;\r\n\tfont-size : 12px;\r\n\tline-height: 1.2em;\r\n}\r\n</style>\r\n<div>\r\n\t<img src=\"d:\\1.png\">\r\n\t<h1>(最多两行20px #333,顶部对齐图片，底部间距8px)</h1>\r\n\t<p>(12px #666 行高1.2)使用语义化的HTML标签完成以下布局，考虑模块化和扩展性。容器默认为320px，右侧文字宽度自适应</p>\r\n</div>\r\n```\r\n------\r\n\r\n##十五、写一个可以暂停执行的JavaScript函数\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n####1、使用函数闭包来实现\r\n```html\r\n<input type=\"button\" value=\"继续\" onclick='st();'/>\r\n<script>\r\n/*需要执行的函数*/\r\nfunction test(x){\r\n    alert(x++);\r\n    alert(x++);\r\n    return function(){\r\n        alert(x++);\r\n    }\r\n}\r\nvar st = test(10);\r\n</script>\r\n```\r\n####2、使用setTimeOut来实现\r\n```html\r\n<script language=\"javascript\"> \r\n/*Javascript中暂停功能的实现 \r\nJavascript本身没有暂停功能（sleep不能使用）同时 vbscript也不能使用doEvents，故编写此函数实现此功能。 \r\njavascript作为弱对象语言，一个函数也可以作为一个对象使用。 \r\n比如： \r\nfunction Test(){ \r\n   alert(\"hello world\"); \r\n   this.NextStep=function(){ \r\n      alert(\"NextStep\"); \r\n   } \r\n} \r\n我们可以这样调用 var myTest=new Test();myTest.NextStep();\r\n我们做暂停的时候可以吧一个函数分为两部分，暂停操作前的不变，把要在暂停后执行的代码放在this.NextStep中。 \r\n为了控制暂停和继续，我们需要编写两个函数来分别实现暂停和继续功能。 \r\n暂停函数如下： \r\n*/\r\nfunction Pause(obj,iMinSecond){ \r\n    if (window.eventList==null) window.eventList=new Array(); \r\n    var ind=-1; \r\n    for (var i=0;i<window.eventList.length;i++){ \r\n        if (window.eventList[i]==null) { \r\n            window.eventList[i]=obj; \r\n            ind=i; \r\n            break; \r\n        } \r\n    } \r\n    if (ind==-1){ \r\n        ind=window.eventList.length; \r\n        window.eventList[ind]=obj; \r\n    } \r\n    setTimeout(\"GoOn(\" + ind + \")\",iMinSecond); \r\n}\r\n/* \r\n该函数把要暂停的函数放到数组window.eventList里，同时通过setTimeout来调用继续函数。 \r\n继续函数如下： \r\n*/\r\nfunction GoOn(ind){ \r\n    var obj=window.eventList[ind]; \r\n    window.eventList[ind]=null; \r\n    if (obj.NextStep) obj.NextStep(); \r\n    else obj(); \r\n} \r\n/* \r\n该函数调用被暂停的函数的NextStep方法，如果没有这个方法则重新调用该函数。 \r\n函数编写完毕，我们可以作如下测试： \r\n*/\r\nfunction Test(){ \r\n   alert(\"hellow\"); \r\n   Pause(this,1000);//调用暂停函数  \r\n   this.NextStep=function(){ \r\n     alert(\"NextStep\"); \r\n  } \r\n} \r\n</script>\r\n```\r\n------\r\n\r\n##十六、用JavaScript写一个Ajax的get请求\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n```JavaScript\r\n/* 创建 XMLHttpRequest 对象 */\r\nvar xmlHttp = null;\r\nfunction GetXmlHttpObject(){\r\n    if (window.XMLHttpRequest){\r\n      // code for IE7+, Firefox, Chrome, Opera, Safari\r\n      Xmlhttp = new XMLHttpRequest();\r\n    }else{// code for IE6, IE5\r\n      Xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n    }\r\n    return xmlhttp;\r\n}\r\n// -----------ajax方法-----------//\r\nfunction getLabelsGet(){\r\n    xmlHttp = GetXmlHttpObject();\r\n    if (xmlHttp == null){\r\n        alert('您的浏览器不支持AJAX！');\r\n        return;\r\n    }\r\n    var id = document.getElementById('id').value;\r\n    var url=\"http://timtsang.github.io?id=\"+id+\"&t/\"+Math.random();\r\n    xmlHttp.open(\"GET\",url,true);\r\n    xmlHttp.onreadystatechange=favorOK;//发送事件后，收到信息了调用函数\r\n    xmlHttp.send();\r\n}\r\nfunction getOkGet(){\r\n    if(xmlHttp.readyState==1||xmlHttp.readyState==2||xmlHttp.readyState==3){\r\n        // 本地提示：加载中\r\n    }\r\n    if (xmlHttp.readyState==4 && xmlHttp.status==200){\r\n        var d= xmlHttp.responseText;\r\n        // 处理返回结果\r\n    }\r\n}\r\n```\r\n------\r\n\r\n##十七、使用html+css实现以下图形（不能用图片）\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20150404154549977)\r\n\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n这道题感觉是做的最蛋疼的一道题，因为我之前根本就不理解题目到底要我实现哪个图形，狂刷新了N多遍网页，也没看到什么图形，后来觉得闻东师兄提醒之后才恍然大悟，原来真的是要我实现右边那个插入图片的小图标。不过就算当初知道这要实现这个小图标，我也做不出来，因为我根本不知道那两个三角形要怎么实现。\r\n```html\r\n<title>picture</title>\r\n<style type=\"text/css\">\r\n#rectangle{\r\n\tbackground: #FFF;\r\n    border: 10px solid #999999;\r\n    padding:10px;\r\n    height: 120px;\r\n    width: 200px;\r\n}\r\n#circle{\r\n\tposition:absolute;\r\n\tmargin-left: 140px;\r\n\tmargin-top: 10px;\r\n\twidth: 40px;\r\n\theight: 40px;\r\n\tbackground: #999999; \r\n\t-moz-border-radius: 20px; \r\n\t-webkit-border-radius: 20px; \r\n\tborder-radius: 20px;\r\n}\r\n#triangle{\r\n\twidth: 0; \r\n\theight: 0; \r\n\tposition:absolute;\r\n\tmargin-top: 40px;\r\n\tborder-bottom: 80px solid #999999; \r\n\tborder-left: 50px solid transparent; \r\n\tborder-right: 70px solid transparent; \r\n}\r\n#triangle2{\r\n\twidth: 0; \r\n\theight: 0; \r\n\tposition:absolute;\r\n\tmargin-top: 60px;\r\n\tmargin-left: 80px;\r\n\tborder-bottom: 60px solid #999999; \r\n\tborder-left: 30px solid transparent; \r\n\tborder-right: 70px solid transparent; \r\n}\r\n</style>\r\n</head>\r\n<div id=\"rectangle\"><span id=\"circle\"></span><span id=\"triangle\"></span><span id=\"triangle2\"></span></div>\r\n</body>\r\n```\r\n效果图如下：\r\n\r\n![这里写图片描述](http://img.blog.csdn.net/20150404154532898)\r\n\r\n------\r\n\r\n##十八、数组去重，然后使数组元素按降序排序\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n在排序的算法中，快速排序是相对比较高效的：\r\n```JavaScript\r\nArray.prototype.quickSort = function(){\r\n\r\n\tif(this.length <= 1){\r\n\t\r\n\t\treturn this;\r\n\t\t\r\n\t}else{\r\n\t\r\n\t\tvar leftArray = [],\r\n\t\t\r\n\t\t \trightArray = [],\r\n\t\t \t\r\n\t\t \tnum = Math.floor((this.length)/2),\r\n\t\t \t\r\n\t\t \tmiddleValue = this.splice(num,1);\r\n\t\t \t\r\n\t\tfor(var i = 0; i < this.length; i++){\r\n\t\t\r\n\t\t\tif(this[i] > middleValue){\r\n\t\t\t\r\n\t\t\t\tleftArray.push(this[i]);\r\n\t\t\t\t\r\n\t\t\t}else{\r\n\t\t\t\r\n\t\t\t\trightArray.push(this[i]);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn leftArray.quickSort().concat(middleValue,rightArray.quickSort());\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n```\r\n对于数组去重，有以下三种方法：\r\n\r\n第一种：\r\n```JavaScript\r\nArray.prototype.unique1 = function(){\r\n\r\n\tvar newArray = [this[0]];//结果数组\r\n\t\r\n\tfor(var i = 1; i < this.length; i++){\r\n\t\r\n\t\tif(newArray.indexOf(this[i]) == -1){\r\n\t\t\r\n\t\t\tnewArray.push(this[i]);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\treturn newArray;\r\n\t\r\n}\r\n```\r\n第二种：\r\n```JavaScript\r\nArray.prototype.unique2 = function(){\r\n\r\n\tvar newArray = [this[0]];//结果数组\r\n\t\r\n\tfor(var i = 1; i < this.length; i++){\r\n\t\r\n\t\tif(this.indexOf(this[i]) == i){\r\n\t\t\r\n\t\t\tnewArray.push(this[i]);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\treturn newArray;\r\n\t\r\n}\r\n```\r\n第三种：\r\n```JavaScript\r\nArray.prototype.unique3 = function(){\r\n\r\n\tvar arrayMap = {}, newArray = [];\r\n\t\r\n\tfor(var i = 0; i < this.length; i++){\r\n\t\r\n\t\tif(!arrayMap[this[i]]){\r\n\t\t\r\n\t\t\tarrayMap[this[i]] = true;\r\n\t\t\t\r\n\t\t\tnewArray.push(this[i]);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\treturn newArray;\r\n\t\r\n}\r\n```\r\n先对数组按降序排序，再去重便可实现题目的要求,这样效率也会高一点：\r\n```JavaScript\r\nvar newArray = [1,2,1,9,10,3,4,3,5,2,4,6,5,7,4,8,7,3,5,3];\r\n\r\nvar nowArray = newArray.quickSort().unique1();\r\n\r\nconsole.log(nowArray);\r\n```\r\n------\r\n\r\n##十九、已知：\r\n```JavaScript\r\nvar data = {\r\n\tname: 'xiaoming',\r\n\tage: '18'\r\n};\r\nvar template = \"My name is {$name}, my age is {$age}\".\r\n//写一个函数，实现：\r\nfunction shenmegui(template, data) {\r\n\r\n} => My name is xiaoming, my age is 18.\r\n```\r\n<i class=\"icon-pencil\"></i> 解析：\r\n\r\n```JavaScript\r\nvar data = {\r\n\r\n\tname:'xiaoming',\r\n\t\r\n\tage:'18'\r\n\t\r\n};\r\n\r\nvar template = \"My name is {$name},my age is {$age}.\"\r\n\r\nfunction outputTemplate(template,data){\r\n\r\n\tvar regName = /(\\{\\$name\\})/g;\r\n\t\r\n\tvar regAge = /(\\{\\$age\\})/g;\r\n\t\r\n\ttemplate = template.replace(regName,data.name);\r\n\t\r\n\ttemplate = template.replace(regAge,data.age);\r\n\t\r\n\treturn template;\r\n}\r\n\r\nalert(outputTemplate(template,data));\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}